[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aws-scanner"
version = "0.1.0"
description = "A comprehensive AWS resource scanner that identifies all cost-incurring and deletable resources"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
requires-python = ">=3.8.1"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "typing-extensions>=4.9.0",
    "tqdm>=4.66.0",
    "rich>=13.7.0",
    "python-json-logger>=2.0.7",
]

[project.urls]
Homepage = "https://github.com/stuartMoorhouse/aws-scanner"
Repository = "https://github.com/stuartMoorhouse/aws-scanner.git"
Issues = "https://github.com/stuartMoorhouse/aws-scanner/issues"

[project.scripts]
aws-scanner = "scan_aws:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "moto>=4.2.0",
    "mypy>=1.8.0",
    "black>=23.12.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "boto3-stubs[essential]>=1.34.0",
    "types-requests>=2.31.0",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "moto>=4.2.0",
    "mypy>=1.8.0",
    "black>=23.12.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "boto3-stubs[essential]>=1.34.0",
    "types-requests>=2.31.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=aws_scanner",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests (require AWS credentials)",
    "slow: Slow tests",
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    "tests/",
    "build/",
    "dist/",
]

[tool.coverage.run]
source = ["aws_scanner"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]